package stepik

import scan
/*
Функция <string>.capitalize() возвращает строку, заменяя первую букву на заглавную, если это возможно.

Функция <string>.decapitalize() возвращает строку, заменяя первую букву на строчную, если это возможно.

Функция <string>.trim() возвращает строку, убирая пробелы в начале и в конце.

Функция <string>.contains() имеет несколько вариантов:
    1) contains(other : String, ignoreCase: Boolean):
        Возвращает true, если исходная строка содержит строку other и false в обратном случае.
        Аргумент ignoreCase ("игнорировать регистр") является необязательным и равен false по умолчанию.
        Если он равен true, то искомая и исходная строки не будут проверяться на соответствие регистра
        (большие и маленькие буквы будут проверяться одинаково)
    2) contains(char: Char, ignoreCase: Boolean)
        Возвращает true, если исходная строка содержит символ char и false в обратном случае. С аргументом
        ignoreCase все так же, как и в предыдущем случае.
    3) contains(regex: Regex) - проверяет строку по регулярному выражению. Регулярные выражения мы еще не
        рассматривали, но позже обязательно о них поговорим.

Функция <string>.equals(other: String, ignoreCase: Boolean) проверяет строки на соответствие и возвращает
тип Boolean. Аргумент ignoreCase является необязательным и позволяет сравнивать строки без учёта регистра
(как и в предыдущем шаге).

Функция <string>.replace() имеет несколько вариаций:
    1) replace(oldChar: Char, newChar: Char, ignoreCase) - возвращает строку, заменяя символ oldChar на символ newChar.
    2) replace(oldValue: String, newValue: String, ignoreCase) - возвращает строку, заменяя строку oldValue на
     строку newValue.

Следующие функции принимают те же параметры, что и функция replace(), но действуют по-другому:
    - replaceFirst() - заменяет только первый совпадающий элемент
    - replaceBefore() - заменяет всё, что находится перед первым совпадающим элементом
    - replaceBeforeLast() - заменяет всё, что находится перед последним совпадающим элементом
    - replaceAfter() - заменяет всё, что находится после первого совпадающего элемента
    - replaceAfterLast() - заменяет всё, что находится после последнего совпадающего элемента
    примеры:
        println ("Pa Pa Pa Pa".replace("Pa", "LOL")) // LOL LOL LOL LOL
        println ("Pa Pa Pa Pa".replaceFirst("Pa", "LOL")) //LOL Pa Pa Pa
        println ("Pa Pa Pa Pa".replaceBefore("Pa", "LOL")) // LOLPa Pa Pa Pa
        println ("Pa Pa Pa Pa".replaceBeforeLast("Pa", "LOL")) // LOLPa
        println ("Pa Pa Pa Pa".replaceAfter("Pa", "LOL")) // PaLOL
        println ("Pa Pa Pa Pa".replaceAfterLast("Pa", "LOL")) // Pa Pa Pa PaLOL

Функции <string>.endsWith(..., ignoreCase) и <string>.startsWith(..., ignoreCase) имеют несколько вариаций,
мы рассмотрим только две, где вместо многоточия ставится выражение типа Char или String (как в предыдущих шагах).
    Функция startsWith() вернёт true, если строка начинается с указанной строки/символа. Функция endsWith(),
    соответственно, проверит, оканчивается ли строка на указанное значение. Аргумент ignoreCase действует так же,
    как и обычно.

Функция <string>.reversed() возвращает строку, переворачивая её
 */
//модуль 1.14 Работа со строками #2
fun main (){
    //***********************************************************************************************************
    //Напишите программу, которая считывает два слова, введенных через пробел, и выводит true, если они равны и
    //false, если не равны. Регистр не учитывать.

//    val str = scan.nextLine().split(" ")
//    print (str[0].equals(str[1], ignoreCase = true))

    //***********************************************************************************************************
    //Напишите программу, которая считывает пять различных имён, записанных через пробел и исправляет ошибки в
    //их написании.

//    val str = scan.nextLine().split(" ")
//    var i = 0
//    for (i in str.indices) print ("${str[i].capitalize()} ")

    //***********************************************************************************************************
    //Внимание, генерал! В наши войска пробрался гриб! Нам нужно вычислить и обезвредить его.
    //На вход подаются строки A и B, разделенные пробелом. Строка A - список людей в казарме. Строка B - сигнатура
    //гриба. Вывести строку A, заменяя все грибы на символ _

//    val str = scan.nextLine().split(" ")
//    print(str[0].replace(str[1], "_"))

    //***********************************************************************************************************
    //На вход подаются строки A и B, разделённые пробелом. Строка A - список людей в казарме. B - сигнатура шпиона.
    //Вывести строку A, заменяя всех шпионов на символ _ и количество шпионов через пробел.
    //Гарантируется, что в строке A символов _ изначально нет.

//    val str = scan.nextLine().split(" ")
//    val str1 = str[0]
//    val str2 = str[1]
//    var count = 0
//    for (i in 0..str1.length-1 ) {
//        if (str1[i].equals(str2[0])) count++
//        else count
//    }
//    print("${str[0].replace(str[1], "_")} ${count}")
    //***********************************************************************************************************
}